[{"title":"正规军代码","url":"/2019/04/12/正规军代码/","content":"\nES5 的编码规范请查看[版本一](https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md)，[版本二](https://github.com/adamlu/javascript-style-guide)。\n\n翻译自 [Airbnb JavaScript Style Guide](https://github.com/airbnb/javascript) 。\n\n**用更合理的方式写 JavaScript**\n\n<a name=\"目录\"></a>\n## 目录\n\n  1. [类型](#类型)\n  1. [引用](#引用)\n  1. [对象](#对象)\n  1. [数组](#数组)\n  1. [解构](#解构)\n  1. [字符串](#字符串)\n  1. [函数](#函数)\n  1. [箭头函数](#箭头函数)\n  1. [构造函数](#构造函数)\n  1. [模块](#模块)\n  2. [迭代器和生成器](#迭代器和生成器)\n  3. [属性](#属性)\n  4. [变量](#变量)\n  5. [提升](#提升)\n  6. [比较运算符和等号](#比较运算符和等号)\n  7. [代码块](#代码块)\n  8. [注释](#注释)\n  9. [空白](#空白)\n  10. [逗号](#逗号)\n  11. [分号](#分号)\n  12. [类型转换](#类型转换)\n  13. [命名规则](#命名规则)\n  14. [存取器](#存取器)\n  15. [事件](#事件)\n  16. [jQuery](#jQuery)\n  17. [ECMAScript 5 兼容性](#ECMAScript-5-兼容性)\n  18. [ECMAScript 6 编码规范](#ECMAScript-6-编码规范)\n  19. [测试](#测试)\n  20. [性能](#性能)\n  21. [相关资源](#相关资源)\n  22. [使用情况](#使用情况)\n  23. [其他翻译](#翻译)\n  24. [JavaScript 编码规范说明](#JavaScript-编码规范说明)\n  25. [讨论 JavaScript](#讨论-JavaScriptt)\n  26. [贡献者](#贡献者)\n  27. [许可协议](#许可协议)\n\n<a name=\"types\"></a>\n## 类型\n\n  - [1.1](#1.1) <a name='1.1'></a> **基本类型**: 直接存取基本类型。\n\n    + `字符串`\n    + `数值`\n    + `布尔类型`\n    + `null`\n    + `undefined`\n\n    ```javascript\n    const foo = 1;\n    let bar = foo;\n\n    bar = 9;\n\n    console.log(foo, bar); // => 1, 9\n    ```\n\n  - [1.2](#1.2) <a name='1.2'></a> **复杂类型**: 通过引用的方式存取复杂类型。\n\n    + `对象`\n    + `数组`\n    + `函数`\n\n    ```javascript\n    const foo = [1, 2];\n    const bar = foo;\n\n    bar[0] = 9;\n\n    console.log(foo[0], bar[0]); // => 9, 9\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"references\"></a>\n## 引用\n\n  - [2.1](#2.1) <a name='2.1'></a> 对所有的引用使用 `const` ；不要使用 `var`。\n\n    > 为什么？这能确保你无法对引用重新赋值，也不会导致出现 bug 或难以理解。\n\n    ```javascript\n    // bad\n    var a = 1;\n    var b = 2;\n\n    // good\n    const a = 1;\n    const b = 2;\n    ```\n\n  - [2.2](#2.2) <a name='2.2'></a> 如果你一定需要可变动的引用，使用 `let` 代替 `var`。\n\n    > 为什么？因为  `let` 是块级作用域，而 `var` 是函数作用域。\n\n    ```javascript\n    // bad\n    var count = 1;\n    if (true) {\n      count += 1;\n    }\n\n    // good, use the let.\n    let count = 1;\n    if (true) {\n      count += 1;\n    }\n    ```\n\n  - [2.3](#2.3) <a name='2.3'></a> 注意 `let` 和 `const` 都是块级作用域。\n\n    ```javascript\n    // const 和 let 只存在于它们被定义的区块内。\n    {\n      let a = 1;\n      const b = 1;\n    }\n    console.log(a); // ReferenceError\n    console.log(b); // ReferenceError\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"objects\"></a>\n## 对象\n\n  - [3.1](#3.1) <a name='3.1'></a> 使用字面值创建对象。\n\n    ```javascript\n    // bad\n    const item = new Object();\n\n    // good\n    const item = {};\n    ```\n\n  - [3.2](#3.2) <a name='3.2'></a> 如果你的代码在浏览器环境下执行，别使用 [保留字](http://es5.github.io/#x7.6.1) 作为键值。这样的话在 IE8 不会运行。 [更多信息](https://github.com/airbnb/javascript/issues/61)。 但在 ES6 模块和服务器端中使用没有问题。\n\n    ```javascript\n    // bad\n    const superman = {\n      default: { clark: 'kent' },\n      private: true,\n    };\n\n    // good\n    const superman = {\n      defaults: { clark: 'kent' },\n      hidden: true,\n    };\n    ```\n\n  - [3.3](#3.3) <a name='3.3'></a> 使用同义词替换需要使用的保留字。\n\n    ```javascript\n    // bad\n    const superman = {\n      class: 'alien',\n    };\n\n    // bad\n    const superman = {\n      klass: 'alien',\n    };\n\n    // good\n    const superman = {\n      type: 'alien',\n    };\n    ```\n\n  <a name=\"es6-computed-properties\"></a>\n  - [3.4](#3.4) <a name='3.4'></a> 创建有动态属性名的对象时，使用可被计算的属性名称。\n\n    > 为什么？因为这样可以让你在一个地方定义所有的对象属性。\n\n    ```javascript\n    function getKey(k) {\n      return `a key named ${k}`;\n    }\n\n    // bad\n    const obj = {\n      id: 5,\n      name: 'San Francisco',\n    };\n    obj[getKey('enabled')] = true;\n\n    // good\n    const obj = {\n      id: 5,\n      name: 'San Francisco',\n      [getKey('enabled')]: true,\n    };\n    ```\n\n  <a name=\"es6-object-shorthand\"></a>\n  - [3.5](#3.5) <a name='3.5'></a> 使用对象方法的简写。\n\n    ```javascript\n    // bad\n    const atom = {\n      value: 1,\n\n      addValue: function (value) {\n        return atom.value + value;\n      },\n    };\n\n    // good\n    const atom = {\n      value: 1,\n\n      addValue(value) {\n        return atom.value + value;\n      },\n    };\n    ```\n\n  <a name=\"es6-object-concise\"></a>\n  - [3.6](#3.6) <a name='3.6'></a> 使用对象属性值的简写。\n\n    > 为什么？因为这样更短更有描述性。\n\n    ```javascript\n    const lukeSkywalker = 'Luke Skywalker';\n\n    // bad\n    const obj = {\n      lukeSkywalker: lukeSkywalker,\n    };\n\n    // good\n    const obj = {\n      lukeSkywalker,\n    };\n    ```\n\n  - [3.7](#3.7) <a name='3.7'></a> 在对象属性声明前把简写的属性分组。\n\n    > 为什么？因为这样能清楚地看出哪些属性使用了简写。\n\n    ```javascript\n    const anakinSkywalker = 'Anakin Skywalker';\n    const lukeSkywalker = 'Luke Skywalker';\n\n    // bad\n    const obj = {\n      episodeOne: 1,\n      twoJedisWalkIntoACantina: 2,\n      lukeSkywalker,\n      episodeThree: 3,\n      mayTheFourth: 4,\n      anakinSkywalker,\n    };\n\n    // good\n    const obj = {\n      lukeSkywalker,\n      anakinSkywalker,\n      episodeOne: 1,\n      twoJedisWalkIntoACantina: 2,\n      episodeThree: 3,\n      mayTheFourth: 4,\n    };\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"arrays\"></a>\n## 数组\n\n  - [4.1](#4.1) <a name='4.1'></a> 使用字面值创建数组。\n\n    ```javascript\n    // bad\n    const items = new Array();\n\n    // good\n    const items = [];\n    ```\n\n  - [4.2](#4.2) <a name='4.2'></a> 向数组添加元素时使用 Arrary#push 替代直接赋值。\n\n    ```javascript\n    const someStack = [];\n\n\n    // bad\n    someStack[someStack.length] = 'abracadabra';\n\n    // good\n    someStack.push('abracadabra');\n    ```\n\n  <a name=\"es6-array-spreads\"></a>\n  - [4.3](#4.3) <a name='4.3'></a> 使用拓展运算符 `...` 复制数组。\n\n    ```javascript\n    // bad\n    const len = items.length;\n    const itemsCopy = [];\n    let i;\n\n    for (i = 0; i < len; i++) {\n      itemsCopy[i] = items[i];\n    }\n\n    // good\n    const itemsCopy = [...items];\n    ```\n  - [4.4](#4.4) <a name='4.4'></a> 使用 Array#from 把一个类数组对象转换成数组。\n\n    ```javascript\n    const foo = document.querySelectorAll('.foo');\n    const nodes = Array.from(foo);\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"destructuring\"></a>\n## 解构\n\n  - [5.1](#5.1) <a name='5.1'></a> 使用解构存取和使用多属性对象。\n\n    > 为什么？因为解构能减少临时引用属性。\n\n    ```javascript\n    // bad\n    function getFullName(user) {\n      const firstName = user.firstName;\n      const lastName = user.lastName;\n\n      return `${firstName} ${lastName}`;\n    }\n\n    // good\n    function getFullName(obj) {\n      const { firstName, lastName } = obj;\n      return `${firstName} ${lastName}`;\n    }\n\n    // best\n    function getFullName({ firstName, lastName }) {\n      return `${firstName} ${lastName}`;\n    }\n    ```\n\n  - [5.2](#5.2) <a name='5.2'></a> 对数组使用解构赋值。\n\n    ```javascript\n    const arr = [1, 2, 3, 4];\n\n    // bad\n    const first = arr[0];\n    const second = arr[1];\n\n    // good\n    const [first, second] = arr;\n    ```\n\n  - [5.3](#5.3) <a name='5.3'></a> 需要回传多个值时，使用对象解构，而不是数组解构。\n    > 为什么？增加属性或者改变排序不会改变调用时的位置。\n\n    ```javascript\n    // bad\n    function processInput(input) {\n      // then a miracle occurs\n      return [left, right, top, bottom];\n    }\n\n    // 调用时需要考虑回调数据的顺序。\n    const [left, __, top] = processInput(input);\n\n    // good\n    function processInput(input) {\n      // then a miracle occurs\n      return { left, right, top, bottom };\n    }\n\n    // 调用时只选择需要的数据\n    const { left, right } = processInput(input);\n    ```\n\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"strings\"></a>\n## Strings\n\n  - [6.1](#6.1) <a name='6.1'></a> 字符串使用单引号 `''` 。\n\n    ```javascript\n    // bad\n    const name = \"Capt. Janeway\";\n\n    // good\n    const name = 'Capt. Janeway';\n    ```\n\n  - [6.2](#6.2) <a name='6.2'></a> 字符串超过 80 个字节应该使用字符串连接号换行。\n  - [6.3](#6.3) <a name='6.3'></a> 注：过度使用字串连接符号可能会对性能造成影响。[jsPerf](http://jsperf.com/ya-string-concat) 和 [讨论](https://github.com/airbnb/javascript/issues/40).\n\n    ```javascript\n    // bad\n    const errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\n\n    // bad\n    const errorMessage = 'This is a super long error that was thrown because \\\n    of Batman. When you stop to think about how Batman had anything to do \\\n    with this, you would get nowhere \\\n    fast.';\n\n    // good\n    const errorMessage = 'This is a super long error that was thrown because ' +\n      'of Batman. When you stop to think about how Batman had anything to do ' +\n      'with this, you would get nowhere fast.';\n    ```\n\n  <a name=\"es6-template-literals\"></a>\n  - [6.4](#6.4) <a name='6.4'></a> 程序化生成字符串时，使用模板字符串代替字符串连接。\n\n    > 为什么？模板字符串更为简洁，更具可读性。\n\n    ```javascript\n    // bad\n    function sayHi(name) {\n      return 'How are you, ' + name + '?';\n    }\n\n    // bad\n    function sayHi(name) {\n      return ['How are you, ', name, '?'].join();\n    }\n\n    // good\n    function sayHi(name) {\n      return `How are you, ${name}?`;\n    }\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"functions\"></a>\n## 函数\n\n  - [7.1](#7.1) <a name='7.1'></a> 使用函数声明代替函数表达式。\n\n    > 为什么？因为函数声明是可命名的，所以他们在调用栈中更容易被识别。此外，函数声明会把整个函数提升（hoisted），而函数表达式只会把函数的引用变量名提升。这条规则使得[箭头函数](#arrow-functions)可以取代函数表达式。\n\n    ```javascript\n    // bad\n    const foo = function () {\n    };\n\n    // good\n    function foo() {\n    }\n    ```\n\n  - [7.2](#7.2) <a name='7.2'></a> 函数表达式:\n\n    ```javascript\n    // 立即调用的函数表达式 (IIFE)\n    (() => {\n      console.log('Welcome to the Internet. Please follow me.');\n    })();\n    ```\n\n  - [7.3](#7.3) <a name='7.3'></a> 永远不要在一个非函数代码块（`if`、`while` 等）中声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但它们的解析表现不一致。\n  - [7.4](#7.4) <a name='7.4'></a> **注意:** ECMA-262 把 `block` 定义为一组语句。函数声明不是语句。[阅读 ECMA-262 关于这个问题的说明](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97)。\n\n    ```javascript\n    // bad\n    if (currentUser) {\n      function test() {\n        console.log('Nope.');\n      }\n    }\n\n    // good\n    let test;\n    if (currentUser) {\n      test = () => {\n        console.log('Yup.');\n      };\n    }\n    ```\n\n  - [7.5](#7.5) <a name='7.5'></a> 永远不要把参数命名为 `arguments`。这将取代原来函数作用域内的 `arguments` 对象。\n\n    ```javascript\n    // bad\n    function nope(name, options, arguments) {\n      // ...stuff...\n    }\n\n    // good\n    function yup(name, options, args) {\n      // ...stuff...\n    }\n    ```\n\n  <a name=\"es6-rest\"></a>\n  - [7.6](#7.6) <a name='7.6'></a> 不要使用 `arguments`。可以选择 rest 语法 `...` 替代。\n\n    > 为什么？使用 `...` 能明确你要传入的参数。另外 rest 参数是一个真正的数组，而 `arguments` 是一个类数组。\n\n    ```javascript\n    // bad\n    function concatenateAll() {\n      const args = Array.prototype.slice.call(arguments);\n      return args.join('');\n    }\n\n    // good\n    function concatenateAll(...args) {\n      return args.join('');\n    }\n    ```\n\n  <a name=\"es6-default-parameters\"></a>\n  - [7.7](#7.7) <a name='7.7'></a> 直接给函数的参数指定默认值，不要使用一个变化的函数参数。\n\n    ```javascript\n    // really bad\n    function handleThings(opts) {\n      // 不！我们不应该改变函数参数。\n      // 更加糟糕: 如果参数 opts 是 false 的话，它就会被设定为一个对象。\n      // 但这样的写法会造成一些 Bugs。\n      //（译注：例如当 opts 被赋值为空字符串，opts 仍然会被下一行代码设定为一个空对象。）\n      opts = opts || {};\n      // ...\n    }\n\n    // still bad\n    function handleThings(opts) {\n      if (opts === void 0) {\n        opts = {};\n      }\n      // ...\n    }\n\n    // good\n    function handleThings(opts = {}) {\n      // ...\n    }\n    ```\n\n  - [7.8](#7.8) <a name='7.8'></a> 直接给函数参数赋值时需要避免副作用。\n\n  > 为什么？因为这样的写法让人感到很困惑。\n\n  ```javascript\n  var b = 1;\n  // bad\n  function count(a = b++) {\n    console.log(a);\n  }\n  count();  // 1\n  count();  // 2\n  count(3); // 3\n  count();  // 3\n  ```\n\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"arrow-functions\"></a>\n## 箭头函数\n\n  - [8.1](#8.1) <a name='8.1'></a> 当你必须使用函数表达式（或传递一个匿名函数）时，使用箭头函数符号。\n\n    > 为什么？因为箭头函数创造了新的一个 `this` 执行环境（译注：参考 [Arrow functions - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) 和 [ES6 arrow functions, syntax and lexical scoping](http://toddmotto.com/es6-arrow-functions-syntaxes-and-lexical-scoping/)），通常情况下都能满足你的需求，而且这样的写法更为简洁。\n\n    > 为什么不？如果你有一个相当复杂的函数，你或许可以把逻辑部分转移到一个函数声明上。\n\n    ```javascript\n    // bad\n    [1, 2, 3].map(function (x) {\n      const y = x + 1;\n      return x * y;\n    });\n\n    // good\n    [1, 2, 3].map((x) => {\n      const y = x + 1;\n      return x * y;\n    });\n    ```\n\n  - [8.2](#8.2) <a name='8.2'></a> 如果一个函数适合用一行写出并且只有一个参数，那就把花括号、圆括号和 `return` 都省略掉。如果不是，那就不要省略。\n\n    > 为什么？语法糖。在链式调用中可读性很高。\n\n    > 为什么不？当你打算回传一个对象的时候。\n\n    ```javascript\n    // good\n    [1, 2, 3].map(x => x * x);\n\n    // good\n    [1, 2, 3].reduce((total, n) => {\n      return total + n;\n    }, 0);\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"constructors\"></a>\n## 构造器\n\n  - [9.1](#9.1) <a name='9.1'></a> 总是使用 `class`。避免直接操作 `prototype` 。\n\n    > 为什么? 因为 `class` 语法更为简洁更易读。\n\n    ```javascript\n    // bad\n    function Queue(contents = []) {\n      this._queue = [...contents];\n    }\n    Queue.prototype.pop = function() {\n      const value = this._queue[0];\n      this._queue.splice(0, 1);\n      return value;\n    }\n\n\n    // good\n    class Queue {\n      constructor(contents = []) {\n        this._queue = [...contents];\n      }\n      pop() {\n        const value = this._queue[0];\n        this._queue.splice(0, 1);\n        return value;\n      }\n    }\n    ```\n\n  - [9.2](#9.2) <a name='9.2'></a> 使用 `extends` 继承。\n\n    > 为什么？因为 `extends` 是一个内建的原型继承方法并且不会破坏 `instanceof`。\n\n    ```javascript\n    // bad\n    const inherits = require('inherits');\n    function PeekableQueue(contents) {\n      Queue.apply(this, contents);\n    }\n    inherits(PeekableQueue, Queue);\n    PeekableQueue.prototype.peek = function() {\n      return this._queue[0];\n    }\n\n    // good\n    class PeekableQueue extends Queue {\n      peek() {\n        return this._queue[0];\n      }\n    }\n    ```\n\n  - [9.3](#9.3) <a name='9.3'></a> 方法可以返回 `this` 来帮助链式调用。\n\n    ```javascript\n    // bad\n    Jedi.prototype.jump = function() {\n      this.jumping = true;\n      return true;\n    };\n\n    Jedi.prototype.setHeight = function(height) {\n      this.height = height;\n    };\n\n    const luke = new Jedi();\n    luke.jump(); // => true\n    luke.setHeight(20); // => undefined\n\n    // good\n    class Jedi {\n      jump() {\n        this.jumping = true;\n        return this;\n      }\n\n      setHeight(height) {\n        this.height = height;\n        return this;\n      }\n    }\n\n    const luke = new Jedi();\n\n    luke.jump()\n      .setHeight(20);\n    ```\n\n\n  - [9.4](#9.4) <a name='9.4'></a> 可以写一个自定义的 `toString()` 方法，但要确保它能正常运行并且不会引起副作用。\n\n    ```javascript\n    class Jedi {\n      constructor(options = {}) {\n        this.name = options.name || 'no name';\n      }\n\n      getName() {\n        return this.name;\n      }\n\n      toString() {\n        return `Jedi - ${this.getName()}`;\n      }\n    }\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"modules\"></a>\n## 模块\n\n  - [10.1](#10.1) <a name='10.1'></a> 总是使用模组 (`import`/`export`) 而不是其他非标准模块系统。你可以编译为你喜欢的模块系统。\n\n    > 为什么？模块就是未来，让我们开始迈向未来吧。\n\n    ```javascript\n    // bad\n    const AirbnbStyleGuide = require('./AirbnbStyleGuide');\n    module.exports = AirbnbStyleGuide.es6;\n\n    // ok\n    import AirbnbStyleGuide from './AirbnbStyleGuide';\n    export default AirbnbStyleGuide.es6;\n\n    // best\n    import { es6 } from './AirbnbStyleGuide';\n    export default es6;\n    ```\n\n  - [10.2](#10.2) <a name='10.2'></a> 不要使用通配符 import。\n\n    > 为什么？这样能确保你只有一个默认 export。\n\n    ```javascript\n    // bad\n    import * as AirbnbStyleGuide from './AirbnbStyleGuide';\n\n    // good\n    import AirbnbStyleGuide from './AirbnbStyleGuide';\n    ```\n\n  - [10.3](#10.3) <a name='10.3'></a>不要从 import 中直接 export。\n\n    > 为什么？虽然一行代码简洁明了，但让 import 和 export 各司其职让事情能保持一致。\n\n    ```javascript\n    // bad\n    // filename es6.js\n    export { es6 as default } from './airbnbStyleGuide';\n\n    // good\n    // filename es6.js\n    import { es6 } from './AirbnbStyleGuide';\n    export default es6;\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"iterators-and-generators\"></a>\n## Iterators and Generators\n\n  - [11.1](#11.1) <a name='11.1'></a> 不要使用 iterators。使用高阶函数例如 `map()` 和 `reduce()` 替代 `for-of`。\n\n    > 为什么？这加强了我们不变的规则。处理纯函数的回调值更易读，这比它带来的副作用更重要。\n\n    ```javascript\n    const numbers = [1, 2, 3, 4, 5];\n\n    // bad\n    let sum = 0;\n    for (let num of numbers) {\n      sum += num;\n    }\n\n    sum === 15;\n\n    // good\n    let sum = 0;\n    numbers.forEach((num) => sum += num);\n    sum === 15;\n\n    // best (use the functional force)\n    const sum = numbers.reduce((total, num) => total + num, 0);\n    sum === 15;\n    ```\n\n  - [11.2](#11.2) <a name='11.2'></a> 现在还不要使用 generators。\n\n  > 为什么？因为它们现在还没法很好地编译到 ES5。 (译者注：目前(2016/03) Chrome 和 Node.js 的稳定版本都已支持 generators)\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"properties\"></a>\n## 属性\n\n  - [12.1](#12.1) <a name='12.1'></a> 使用 `.` 来访问对象的属性。\n\n    ```javascript\n    const luke = {\n      jedi: true,\n      age: 28,\n    };\n\n    // bad\n    const isJedi = luke['jedi'];\n\n    // good\n    const isJedi = luke.jedi;\n    ```\n\n  - [12.2](#12.2) <a name='12.2'></a> 当通过变量访问属性时使用中括号 `[]`。\n\n    ```javascript\n    const luke = {\n      jedi: true,\n      age: 28,\n    };\n\n    function getProp(prop) {\n      return luke[prop];\n    }\n\n    const isJedi = getProp('jedi');\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"variables\"></a>\n## 变量\n\n  - [13.1](#13.1) <a name='13.1'></a> 一直使用 `const` 来声明变量，如果不这样做就会产生全局变量。我们需要避免全局命名空间的污染。[地球队长](http://www.wikiwand.com/en/Captain_Planet)已经警告过我们了。（译注：全局，global 亦有全球的意思。地球队长的责任是保卫地球环境，所以他警告我们不要造成「全球」污染。）\n\n    ```javascript\n    // bad\n    superPower = new SuperPower();\n\n    // good\n    const superPower = new SuperPower();\n    ```\n\n  - [13.2](#13.2) <a name='13.2'></a> 使用 `const` 声明每一个变量。\n\n    > 为什么？增加新变量将变的更加容易，而且你永远不用再担心调换错 `;` 跟 `,`。\n\n    ```javascript\n    // bad\n    const items = getItems(),\n        goSportsTeam = true,\n        dragonball = 'z';\n\n    // bad\n    // (compare to above, and try to spot the mistake)\n    const items = getItems(),\n        goSportsTeam = true;\n        dragonball = 'z';\n\n    // good\n    const items = getItems();\n    const goSportsTeam = true;\n    const dragonball = 'z';\n    ```\n\n  - [13.3](#13.3) <a name='13.3'></a> 将所有的 `const` 和 `let` 分组\n\n    > 为什么？当你需要把已赋值变量赋值给未赋值变量时非常有用。\n\n    ```javascript\n    // bad\n    let i, len, dragonball,\n        items = getItems(),\n        goSportsTeam = true;\n\n    // bad\n    let i;\n    const items = getItems();\n    let dragonball;\n    const goSportsTeam = true;\n    let len;\n\n    // good\n    const goSportsTeam = true;\n    const items = getItems();\n    let dragonball;\n    let i;\n    let length;\n    ```\n\n  - [13.4](#13.4) <a name='13.4'></a> 在你需要的地方给变量赋值，但请把它们放在一个合理的位置。\n\n    > 为什么？`let` 和 `const` 是块级作用域而不是函数作用域。\n\n    ```javascript\n    // good\n    function() {\n      test();\n      console.log('doing stuff..');\n\n      //..other stuff..\n\n      const name = getName();\n\n      if (name === 'test') {\n        return false;\n      }\n\n      return name;\n    }\n\n    // bad - unnecessary function call\n    function(hasName) {\n      const name = getName();\n\n      if (!hasName) {\n        return false;\n      }\n\n      this.setFirstName(name);\n\n      return true;\n    }\n\n    // good\n    function(hasName) {\n      if (!hasName) {\n        return false;\n      }\n\n      const name = getName();\n      this.setFirstName(name);\n\n      return true;\n    }\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"hoisting\"></a>\n## Hoisting\n\n  - [14.1](#14.1) <a name='14.1'></a> `var` 声明会被提升至该作用域的顶部，但它们赋值不会提升。`let` 和 `const` 被赋予了一种称为「[暂时性死区（Temporal Dead Zones, TDZ）](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let)」的概念。这对于了解为什么 [type of 不再安全](http://es-discourse.com/t/why-typeof-is-no-longer-safe/15)相当重要。\n\n    ```javascript\n    // 我们知道这样运行不了\n    // （假设 notDefined 不是全局变量）\n    function example() {\n      console.log(notDefined); // => throws a ReferenceError\n    }\n\n    // 由于变量提升的原因，\n    // 在引用变量后再声明变量是可以运行的。\n    // 注：变量的赋值 `true` 不会被提升。\n    function example() {\n      console.log(declaredButNotAssigned); // => undefined\n      var declaredButNotAssigned = true;\n    }\n\n    // 编译器会把函数声明提升到作用域的顶层，\n    // 这意味着我们的例子可以改写成这样：\n    function example() {\n      let declaredButNotAssigned;\n      console.log(declaredButNotAssigned); // => undefined\n      declaredButNotAssigned = true;\n    }\n\n    // 使用 const 和 let\n    function example() {\n      console.log(declaredButNotAssigned); // => throws a ReferenceError\n      console.log(typeof declaredButNotAssigned); // => throws a ReferenceError\n      const declaredButNotAssigned = true;\n    }\n    ```\n\n  - [14.2](#14.2) <a name='14.2'></a> 匿名函数表达式的变量名会被提升，但函数内容并不会。\n\n    ```javascript\n    function example() {\n      console.log(anonymous); // => undefined\n\n      anonymous(); // => TypeError anonymous is not a function\n\n      var anonymous = function() {\n        console.log('anonymous function expression');\n      };\n    }\n    ```\n\n  - [14.3](#14.3) <a name='14.3'></a> 命名的函数表达式的变量名会被提升，但函数名和函数函数内容并不会。\n\n    ```javascript\n    function example() {\n      console.log(named); // => undefined\n\n      named(); // => TypeError named is not a function\n\n      superPower(); // => ReferenceError superPower is not defined\n\n      var named = function superPower() {\n        console.log('Flying');\n      };\n    }\n\n    // the same is true when the function name\n    // is the same as the variable name.\n    function example() {\n      console.log(named); // => undefined\n\n      named(); // => TypeError named is not a function\n\n      var named = function named() {\n        console.log('named');\n      }\n    }\n    ```\n\n  - [14.4](#14.4) <a name='14.4'></a> 函数声明的名称和函数体都会被提升。\n\n    ```javascript\n    function example() {\n      superPower(); // => Flying\n\n      function superPower() {\n        console.log('Flying');\n      }\n    }\n    ```\n\n  - 想了解更多信息，参考 [Ben Cherry](http://www.adequatelygood.com/) 的 [JavaScript Scoping & Hoisting](http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting)。\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"comparison-operators--equality\"></a>\n## 比较运算符和等号\n\n  - [15.1](#15.1) <a name='15.1'></a> 优先使用 `===` 和 `!==` 而不是 `==` 和 `!=`.\n  - [15.2](#15.2) <a name='15.2'></a> 条件表达式例如 `if` 语句通过抽象方法 `ToBoolean` 强制计算它们的表达式并且总是遵守下面的规则：\n\n    + **对象** 被计算为 **true**\n    + **Undefined** 被计算为 **false**\n    + **Null** 被计算为 **false**\n    + **布尔值** 被计算为 **布尔的值**\n    + **数字** 如果是 **+0、-0、或 NaN** 被计算为 **false**, 否则为 **true**\n    + **字符串** 如果是空字符串 `''` 被计算为 **false**，否则为 **true**\n\n    ```javascript\n    if ([0]) {\n      // true\n      // An array is an object, objects evaluate to true\n    }\n    ```\n\n  - [15.3](#15.3) <a name='15.3'></a> 使用简写。\n\n    ```javascript\n    // bad\n    if (name !== '') {\n      // ...stuff...\n    }\n\n    // good\n    if (name) {\n      // ...stuff...\n    }\n\n    // bad\n    if (collection.length > 0) {\n      // ...stuff...\n    }\n\n    // good\n    if (collection.length) {\n      // ...stuff...\n    }\n    ```\n\n  - [15.4](#15.4) <a name='15.4'></a> 想了解更多信息，参考 Angus Croll 的 [Truth Equality and JavaScript](http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108)。\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"blocks\"></a>\n## 代码块\n\n  - [16.1](#16.1) <a name='16.1'></a> 使用大括号包裹所有的多行代码块。\n\n    ```javascript\n    // bad\n    if (test)\n      return false;\n\n    // good\n    if (test) return false;\n\n    // good\n    if (test) {\n      return false;\n    }\n\n    // bad\n    function() { return false; }\n\n    // good\n    function() {\n      return false;\n    }\n    ```\n\n  - [16.2](#16.2) <a name='16.2'></a> 如果通过 `if` 和 `else` 使用多行代码块，把 `else` 放在 `if` 代码块关闭括号的同一行。\n\n    ```javascript\n    // bad\n    if (test) {\n      thing1();\n      thing2();\n    }\n    else {\n      thing3();\n    }\n\n    // good\n    if (test) {\n      thing1();\n      thing2();\n    } else {\n      thing3();\n    }\n    ```\n\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"comments\"></a>\n## 注释\n\n  - [17.1](#17.1) <a name='17.1'></a> 使用 `/** ... */` 作为多行注释。包含描述、指定所有参数和返回值的类型和值。\n\n    ```javascript\n    // bad\n    // make() returns a new element\n    // based on the passed in tag name\n    //\n    // @param {String} tag\n    // @return {Element} element\n    function make(tag) {\n\n      // ...stuff...\n\n      return element;\n    }\n\n    // good\n    /**\n     * make() returns a new element\n     * based on the passed in tag name\n     *\n     * @param {String} tag\n     * @return {Element} element\n     */\n    function make(tag) {\n\n      // ...stuff...\n\n      return element;\n    }\n    ```\n\n  - [17.2](#17.2) <a name='17.2'></a> 使用 `//` 作为单行注释。在评论对象上面另起一行使用单行注释。在注释前插入空行。\n\n    ```javascript\n    // bad\n    const active = true;  // is current tab\n\n    // good\n    // is current tab\n    const active = true;\n\n    // bad\n    function getType() {\n      console.log('fetching type...');\n      // set the default type to 'no type'\n      const type = this._type || 'no type';\n\n      return type;\n    }\n\n    // good\n    function getType() {\n      console.log('fetching type...');\n\n      // set the default type to 'no type'\n      const type = this._type || 'no type';\n\n      return type;\n    }\n    ```\n\n  - [17.3](#17.3) <a name='17.3'></a> 给注释增加 `FIXME` 或 `TODO` 的前缀可以帮助其他开发者快速了解这是一个需要复查的问题，或是给需要实现的功能提供一个解决方式。这将有别于常见的注释，因为它们是可操作的。使用 `FIXME -- need to figure this out` 或者 `TODO -- need to implement`。\n\n  - [17.4](#17.4) <a name='17.4'></a> 使用 `// FIXME`: 标注问题。\n\n    ```javascript\n    class Calculator {\n      constructor() {\n        // FIXME: shouldn't use a global here\n        total = 0;\n      }\n    }\n    ```\n\n  - [17.5](#17.5) <a name='17.5'></a> 使用 `// TODO`: 标注问题的解决方式。\n\n    ```javascript\n    class Calculator {\n      constructor() {\n        // TODO: total should be configurable by an options param\n        this.total = 0;\n      }\n    }\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"whitespace\"></a>\n## 空白\n\n  - [18.1](#18.1) <a name='18.1'></a> 使用 2 个空格作为缩进。\n\n    ```javascript\n    // bad\n    function() {\n    ∙∙∙∙const name;\n    }\n\n    // bad\n    function() {\n    ∙const name;\n    }\n\n    // good\n    function() {\n    ∙∙const name;\n    }\n    ```\n\n  - [18.2](#18.2) <a name='18.2'></a> 在花括号前放一个空格。\n\n    ```javascript\n    // bad\n    function test(){\n      console.log('test');\n    }\n\n    // good\n    function test() {\n      console.log('test');\n    }\n\n    // bad\n    dog.set('attr',{\n      age: '1 year',\n      breed: 'Bernese Mountain Dog',\n    });\n\n    // good\n    dog.set('attr', {\n      age: '1 year',\n      breed: 'Bernese Mountain Dog',\n    });\n    ```\n\n  - [18.3](#18.3) <a name='18.3'></a> 在控制语句（`if`、`while` 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。\n\n    ```javascript\n    // bad\n    if(isJedi) {\n      fight ();\n    }\n\n    // good\n    if (isJedi) {\n      fight();\n    }\n\n    // bad\n    function fight () {\n      console.log ('Swooosh!');\n    }\n\n    // good\n    function fight() {\n      console.log('Swooosh!');\n    }\n    ```\n\n  - [18.4](#18.4) <a name='18.4'></a> 使用空格把运算符隔开。\n\n    ```javascript\n    // bad\n    const x=y+5;\n\n    // good\n    const x = y + 5;\n    ```\n\n  - [18.5](#18.5) <a name='18.5'></a> 在文件末尾插入一个空行。\n\n    ```javascript\n    // bad\n    (function(global) {\n      // ...stuff...\n    })(this);\n    ```\n\n    ```javascript\n    // bad\n    (function(global) {\n      // ...stuff...\n    })(this);↵\n    ↵\n    ```\n\n    ```javascript\n    // good\n    (function(global) {\n      // ...stuff...\n    })(this);↵\n    ```\n\n  - [18.5](#18.5) <a name='18.5'></a> 在使用长方法链时进行缩进。使用前面的点 `.` 强调这是方法调用而不是新语句。\n\n    ```javascript\n    // bad\n    $('#items').find('.selected').highlight().end().find('.open').updateCount();\n\n    // bad\n    $('#items').\n      find('.selected').\n        highlight().\n        end().\n      find('.open').\n        updateCount();\n\n    // good\n    $('#items')\n      .find('.selected')\n        .highlight()\n        .end()\n      .find('.open')\n        .updateCount();\n\n    // bad\n    const leds = stage.selectAll('.led').data(data).enter().append('svg:svg').class('led', true)\n        .attr('width', (radius + margin) * 2).append('svg:g')\n        .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\n        .call(tron.led);\n\n    // good\n    const leds = stage.selectAll('.led')\n        .data(data)\n      .enter().append('svg:svg')\n        .classed('led', true)\n        .attr('width', (radius + margin) * 2)\n      .append('svg:g')\n        .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\n        .call(tron.led);\n    ```\n\n  - [18.6](#18.6) <a name='18.6'></a> 在块末和新语句前插入空行。\n\n    ```javascript\n    // bad\n    if (foo) {\n      return bar;\n    }\n    return baz;\n\n    // good\n    if (foo) {\n      return bar;\n    }\n\n    return baz;\n\n    // bad\n    const obj = {\n      foo() {\n      },\n      bar() {\n      },\n    };\n    return obj;\n\n    // good\n    const obj = {\n      foo() {\n      },\n\n      bar() {\n      },\n    };\n\n    return obj;\n    ```\n\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"commas\"></a>\n## 逗号\n\n  - [19.1](#19.1) <a name='19.1'></a> 行首逗号：**不需要**。\n\n    ```javascript\n    // bad\n    const story = [\n        once\n      , upon\n      , aTime\n    ];\n\n    // good\n    const story = [\n      once,\n      upon,\n      aTime,\n    ];\n\n    // bad\n    const hero = {\n        firstName: 'Ada'\n      , lastName: 'Lovelace'\n      , birthYear: 1815\n      , superPower: 'computers'\n    };\n\n    // good\n    const hero = {\n      firstName: 'Ada',\n      lastName: 'Lovelace',\n      birthYear: 1815,\n      superPower: 'computers',\n    };\n    ```\n\n  - [19.2](#19.2) <a name='19.2'></a> 增加结尾的逗号: **需要**。\n\n    > 为什么? 这会让 git diffs 更干净。另外，像 babel 这样的转译器会移除结尾多余的逗号，也就是说你不必担心老旧浏览器的[尾逗号问题](es5/README.md#commas)。\n\n    ```javascript\n    // bad - git diff without trailing comma\n    const hero = {\n         firstName: 'Florence',\n    -    lastName: 'Nightingale'\n    +    lastName: 'Nightingale',\n    +    inventorOf: ['coxcomb graph', 'modern nursing']\n    }\n\n    // good - git diff with trailing comma\n    const hero = {\n         firstName: 'Florence',\n         lastName: 'Nightingale',\n    +    inventorOf: ['coxcomb chart', 'modern nursing'],\n    }\n\n    // bad\n    const hero = {\n      firstName: 'Dana',\n      lastName: 'Scully'\n    };\n\n    const heroes = [\n      'Batman',\n      'Superman'\n    ];\n\n    // good\n    const hero = {\n      firstName: 'Dana',\n      lastName: 'Scully',\n    };\n\n    const heroes = [\n      'Batman',\n      'Superman',\n    ];\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"semicolons\"></a>\n## 分号\n\n  - [20.1](#20.1) <a name='20.1'></a> **使用分号**\n\n    ```javascript\n    // bad\n    (function() {\n      const name = 'Skywalker'\n      return name\n    })()\n\n    // good\n    (() => {\n      const name = 'Skywalker';\n      return name;\n    })();\n\n    // good (防止函数在两个 IIFE 合并时被当成一个参数)\n    ;(() => {\n      const name = 'Skywalker';\n      return name;\n    })();\n    ```\n\n    [Read more](http://stackoverflow.com/a/7365214/1712802).\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"type-casting--coercion\"></a>\n## 类型转换\n\n  - [21.1](#21.1) <a name='21.1'></a> 在语句开始时执行类型转换。\n  - [21.2](#21.2) <a name='21.2'></a> 字符串：\n\n    ```javascript\n    //  => this.reviewScore = 9;\n\n    // bad\n    const totalScore = this.reviewScore + '';\n\n    // good\n    const totalScore = String(this.reviewScore);\n    ```\n\n  - [21.3](#21.3) <a name='21.3'></a> 对数字使用 `parseInt` 转换，并带上类型转换的基数。\n\n    ```javascript\n    const inputValue = '4';\n\n    // bad\n    const val = new Number(inputValue);\n\n    // bad\n    const val = +inputValue;\n\n    // bad\n    const val = inputValue >> 0;\n\n    // bad\n    const val = parseInt(inputValue);\n\n    // good\n    const val = Number(inputValue);\n\n    // good\n    const val = parseInt(inputValue, 10);\n    ```\n\n  - [21.4](#21.4) <a name='21.4'></a> 如果因为某些原因 parseInt 成为你所做的事的瓶颈而需要使用位操作解决[性能问题](http://jsperf.com/coercion-vs-casting/3)时，留个注释说清楚原因和你的目的。\n\n    ```javascript\n    // good\n    /**\n     * 使用 parseInt 导致我的程序变慢，\n     * 改成使用位操作转换数字快多了。\n     */\n    const val = inputValue >> 0;\n    ```\n\n  - [21.5](#21.5) <a name='21.5'></a> **注:** 小心使用位操作运算符。数字会被当成 [64 位值](http://es5.github.io/#x4.3.19)，但是位操作运算符总是返回 32 位的整数（[参考](http://es5.github.io/#x11.7)）。位操作处理大于 32 位的整数值时还会导致意料之外的行为。[关于这个问题的讨论](https://github.com/airbnb/javascript/issues/109)。最大的 32 位整数是 2,147,483,647：\n\n    ```javascript\n    2147483647 >> 0 //=> 2147483647\n    2147483648 >> 0 //=> -2147483648\n    2147483649 >> 0 //=> -2147483647\n    ```\n\n  - [21.6](#21.6) <a name='21.6'></a> 布尔:\n\n    ```javascript\n    const age = 0;\n\n    // bad\n    const hasAge = new Boolean(age);\n\n    // good\n    const hasAge = Boolean(age);\n\n    // good\n    const hasAge = !!age;\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"naming-conventions\"></a>\n## 命名规则\n\n  - [22.1](#22.1) <a name='22.1'></a> 避免单字母命名。命名应具备描述性。\n\n    ```javascript\n    // bad\n    function q() {\n      // ...stuff...\n    }\n\n    // good\n    function query() {\n      // ..stuff..\n    }\n    ```\n\n  - [22.2](#22.2) <a name='22.2'></a> 使用驼峰式命名对象、函数和实例。\n\n    ```javascript\n    // bad\n    const OBJEcttsssss = {};\n    const this_is_my_object = {};\n    function c() {}\n\n    // good\n    const thisIsMyObject = {};\n    function thisIsMyFunction() {}\n    ```\n\n  - [22.3](#22.3) <a name='22.3'></a> 使用帕斯卡式命名构造函数或类。\n\n    ```javascript\n    // bad\n    function user(options) {\n      this.name = options.name;\n    }\n\n    const bad = new user({\n      name: 'nope',\n    });\n\n    // good\n    class User {\n      constructor(options) {\n        this.name = options.name;\n      }\n    }\n\n    const good = new User({\n      name: 'yup',\n    });\n    ```\n\n  - [22.4](#22.4) <a name='22.4'></a> 不要使用下划线 `_` 结尾或开头来命名属性和方法。\n\n    ```javascript\n    // bad\n    this.__firstName__ = 'Panda';\n    this.firstName_ = 'Panda';\n    this._firstName = 'Panda';\n\n    // good\n    this.firstName = 'Panda';\n    ```\n\n  - [22.5](#22.5) <a name='22.5'></a> 别保存 `this` 的引用。使用箭头函数或 Function#bind。\n\n    ```javascript\n    // bad\n    function foo() {\n      const self = this;\n      return function() {\n        console.log(self);\n      };\n    }\n\n    // bad\n    function foo() {\n      const that = this;\n      return function() {\n        console.log(that);\n      };\n    }\n\n    // good\n    function foo() {\n      return () => {\n        console.log(this);\n      };\n    }\n    ```\n\n  - [22.6](#22.6) <a name='22.6'></a> 如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致。\n\n    ```javascript\n    // file contents\n    class CheckBox {\n      // ...\n    }\n    export default CheckBox;\n\n    // in some other file\n    // bad\n    import CheckBox from './checkBox';\n\n    // bad\n    import CheckBox from './check_box';\n\n    // good\n    import CheckBox from './CheckBox';\n    ```\n\n  - [22.7](#22.7) <a name='22.7'></a> 当你导出默认的函数时使用驼峰式命名。你的文件名必须和函数名完全保持一致。\n\n    ```javascript\n    function makeStyleGuide() {\n    }\n\n    export default makeStyleGuide;\n    ```\n\n  - [22.8](#22.8) <a name='22.8'></a> 当你导出单例、函数库、空对象时使用帕斯卡式命名。\n\n    ```javascript\n    const AirbnbStyleGuide = {\n      es6: {\n      }\n    };\n\n    export default AirbnbStyleGuide;\n    ```\n\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"accessors\"></a>\n## 存取器\n\n  - [23.1](#23.1) <a name='23.1'></a> 属性的存取函数不是必须的。\n  - [23.2](#23.2) <a name='23.2'></a> 如果你需要存取函数时使用 `getVal()` 和 `setVal('hello')`。\n\n    ```javascript\n    // bad\n    dragon.age();\n\n    // good\n    dragon.getAge();\n\n    // bad\n    dragon.age(25);\n\n    // good\n    dragon.setAge(25);\n    ```\n\n  - [23.3](#23.3) <a name='23.3'></a> 如果属性是布尔值，使用 `isVal()` 或 `hasVal()`。\n\n    ```javascript\n    // bad\n    if (!dragon.age()) {\n      return false;\n    }\n\n    // good\n    if (!dragon.hasAge()) {\n      return false;\n    }\n    ```\n\n  - [23.4](#23.4) <a name='23.4'></a> 创建 `get()` 和 `set()` 函数是可以的，但要保持一致。\n\n    ```javascript\n    class Jedi {\n      constructor(options = {}) {\n        const lightsaber = options.lightsaber || 'blue';\n        this.set('lightsaber', lightsaber);\n      }\n\n      set(key, val) {\n        this[key] = val;\n      }\n\n      get(key) {\n        return this[key];\n      }\n    }\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"events\"></a>\n## 事件\n\n  - [24.1](#24.1) <a name='24.1'></a> 当给事件附加数据时（无论是 DOM 事件还是私有事件），传入一个哈希而不是原始值。这样可以让后面的贡献者增加更多数据到事件数据而无需找出并更新事件的每一个处理器。例如，不好的写法：\n\n    ```javascript\n    // bad\n    $(this).trigger('listingUpdated', listing.id);\n\n    ...\n\n    $(this).on('listingUpdated', function(e, listingId) {\n      // do something with listingId\n    });\n    ```\n\n    更好的写法：\n\n    ```javascript\n    // good\n    $(this).trigger('listingUpdated', { listingId : listing.id });\n\n    ...\n\n    $(this).on('listingUpdated', function(e, data) {\n      // do something with data.listingId\n    });\n    ```\n\n  **[⬆ 返回目录](#目录)**\n\n\n## jQuery\n\n  - [25.1](#25.1) <a name='25.1'></a> 使用 `$` 作为存储 jQuery 对象的变量名前缀。\n\n    ```javascript\n    // bad\n    const sidebar = $('.sidebar');\n\n    // good\n    const $sidebar = $('.sidebar');\n    ```\n\n  - [25.2](#25.2) <a name='25.2'></a> 缓存 jQuery 查询。\n\n    ```javascript\n    // bad\n    function setSidebar() {\n      $('.sidebar').hide();\n\n      // ...stuff...\n\n      $('.sidebar').css({\n        'background-color': 'pink'\n      });\n    }\n\n    // good\n    function setSidebar() {\n      const $sidebar = $('.sidebar');\n      $sidebar.hide();\n\n      // ...stuff...\n\n      $sidebar.css({\n        'background-color': 'pink'\n      });\n    }\n    ```\n\n  - [25.3](#25.3) <a name='25.3'></a> 对 DOM 查询使用层叠 `$('.sidebar ul')` 或 父元素 > 子元素 `$('.sidebar > ul')`。 [jsPerf](http://jsperf.com/jquery-find-vs-context-sel/16)\n  - [25.4](#25.4) <a name='25.4'></a> 对有作用域的 jQuery 对象查询使用 `find`。\n\n    ```javascript\n    // bad\n    $('ul', '.sidebar').hide();\n\n    // bad\n    $('.sidebar').find('ul').hide();\n\n    // good\n    $('.sidebar ul').hide();\n\n    // good\n    $('.sidebar > ul').hide();\n\n    // good\n    $sidebar.find('ul').hide();\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"ecmascript-5-compatibility\"></a>\n## ECMAScript 5 兼容性\n\n  - [26.1](#26.1) <a name='26.1'></a> 参考 [Kangax](https://twitter.com/kangax/) 的 ES5 [兼容性](http://kangax.github.com/es5-compat-table/)。\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"ecmascript-6-styles\"></a>\n## ECMAScript 6 规范\n\n  - [27.1](#27.1) <a name='27.1'></a> 以下是链接到 ES6 各个特性的列表。\n\n1. [箭头函数](#arrow-functions)\n1. [类](#constructors)\n1. [对象方法简写](#es6-object-shorthand)\n1. [对象属性简写](#es6-object-concise)\n1. [对象中的可计算属性](#es6-computed-properties)\n1. [模板字符串](#es6-template-literals)\n1. [解构](#destructuring)\n1. [默认参数](#es6-default-parameters)\n1. [Rest](#es6-rest)\n1. [数组 Spreads](#es6-array-spreads)\n1. [Let 及 Const](#references)\n1. [迭代器和生成器](#iterators-and-generators)\n1. [模块](#modules)\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"testing\"></a>\n## 测试\n\n  - [28.1](#28.1) <a name='28.1'></a> **Yup.**\n\n    ```javascript\n    function() {\n      return true;\n    }\n    ```\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"performance\"></a>\n## 性能\n\n  - [On Layout & Web Performance](http://kellegous.com/j/2013/01/26/layout-performance/)\n  - [String vs Array Concat](http://jsperf.com/string-vs-array-concat/2)\n  - [Try/Catch Cost In a Loop](http://jsperf.com/try-catch-in-loop-cost)\n  - [Bang Function](http://jsperf.com/bang-function)\n  - [jQuery Find vs Context, Selector](http://jsperf.com/jquery-find-vs-context-sel/13)\n  - [innerHTML vs textContent for script text](http://jsperf.com/innerhtml-vs-textcontent-for-script-text)\n  - [Long String Concatenation](http://jsperf.com/ya-string-concat)\n  - [Are Javascript functions like `map()`, `reduce()`, and `filter()` optimized for traversing arrays?](https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta)\n  - 等等...\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"resources\"></a>\n## 相关资源（英文）\n\n**了解 ES6**\n\n  - [ECMA 2015 (ES6) 规范草案](https://people.mozilla.org/~jorendorff/es6-draft.html)\n  - [ExploringJS](http://exploringjs.com/)\n  - [ES6 兼容性表](https://kangax.github.io/compat-table/es6/)\n  - [ES6 特性全面概况](http://es6-features.org/)\n\n**看看这个**\n\n  - [Annotated ECMAScript 5.1](http://es5.github.com/)\n\n**工具**\n\n  - 代码风格检查器（Lint）\n    + [ESlint](http://eslint.org/) - [Airbnb Style .eslintrc](https://github.com/airbnb/javascript/blob/master/linters/.eslintrc)\n    + [JSHint](http://www.jshint.com/) - [Airbnb Style .jshintrc](https://github.com/airbnb/javascript/blob/master/linters/jshintrc)\n    + [JSCS](https://github.com/jscs-dev/node-jscs) - [Airbnb Style Preset](https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json)\n\n**其他风格指南**\n\n  - [Google JavaScript Style Guide](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml)\n  - [jQuery Core Style Guidelines](http://docs.jquery.com/JQuery_Core_Style_Guidelines)\n  - [Principles of Writing Consistent, Idiomatic JavaScript](https://github.com/rwldrn/idiomatic.js/)\n\n**其他风格**\n\n  - [Naming this in nested functions](https://gist.github.com/4135065) - Christian Johansen\n  - [Conditional Callbacks](https://github.com/airbnb/javascript/issues/52) - Ross Allen\n  - [Popular JavaScript Coding Conventions on Github](http://sideeffect.kr/popularconvention/#javascript) - JeongHoon Byun\n  - [Multiple var statements in JavaScript, not superfluous](http://benalman.com/news/2012/05/multiple-var-statements-javascript/) - Ben Alman\n\n**拓展阅读**\n\n  - [Understanding JavaScript Closures](http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/) - Angus Croll\n  - [Basic JavaScript for the impatient programmer](http://www.2ality.com/2013/06/basic-javascript.html) - Dr. Axel Rauschmayer\n  - [You Might Not Need jQuery](http://youmightnotneedjquery.com/) - Zack Bloom & Adam Schwartz\n  - [ES6 Features](https://github.com/lukehoban/es6features) - Luke Hoban\n  - [Frontend Guidelines](https://github.com/bendc/frontend-guidelines) - Benjamin De Cock\n\n**书籍**\n\n  - [JavaScript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742) - Douglas Crockford\n  - [JavaScript Patterns](http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752) - Stoyan Stefanov\n  - [Pro JavaScript Design Patterns](http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X)  - Ross Harmes and Dustin Diaz\n  - [High Performance Web Sites: Essential Knowledge for Front-End Engineers](http://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309) - Steve Souders\n  - [Maintainable JavaScript](http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680) - Nicholas C. Zakas\n  - [JavaScript Web Applications](http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X) - Alex MacCaw\n  - [Pro JavaScript Techniques](http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273) - John Resig\n  - [Smashing Node.js: JavaScript Everywhere](http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595) - Guillermo Rauch\n  - [Secrets of the JavaScript Ninja](http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X) - John Resig and Bear Bibeault\n  - [Human JavaScript](http://humanjavascript.com/) - Henrik Joreteg\n  - [Superhero.js](http://superherojs.com/) - Kim Joar Bekkelund, Mads Mobæk, & Olav Bjorkoy\n  - [JSBooks](http://jsbooks.revolunet.com/) - Julien Bouquillon\n  - [Third Party JavaScript](http://manning.com/vinegar/) - Ben Vinegar and Anton Kovalyov\n  - [Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript](http://amzn.com/0321812182) - David Herman\n  - [Eloquent JavaScript](http://eloquentjavascript.net/) - Marijn Haverbeke\n\n**博客**\n\n  - [DailyJS](http://dailyjs.com/)\n  - [JavaScript Weekly](http://javascriptweekly.com/)\n  - [JavaScript, JavaScript...](http://javascriptweblog.wordpress.com/)\n  - [Bocoup Weblog](http://weblog.bocoup.com/)\n  - [Adequately Good](http://www.adequatelygood.com/)\n  - [NCZOnline](http://www.nczonline.net/)\n  - [Perfection Kills](http://perfectionkills.com/)\n  - [Ben Alman](http://benalman.com/)\n  - [Dmitry Baranovskiy](http://dmitry.baranovskiy.com/)\n  - [Dustin Diaz](http://dustindiaz.com/)\n  - [nettuts](http://net.tutsplus.com/?s=javascript)\n\n**播客**\n\n  - [JavaScript Jabber](http://devchat.tv/js-jabber/)\n\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"in-the-wild\"></a>\n## 使用情况\n\n  下列组织应用这份风格指南。\n\n  - **3blades**: [3Blades/javascript](https://github.com/3blades/javascript)\n  - **4Catalyzer**: [4Catalyzer/javascript](https://github.com/4Catalyzer/javascript)\n  - **Aan Zee**: [AanZee/javascript](https://github.com/AanZee/javascript)\n  - **Adult Swim**: [adult-swim/javascript](https://github.com/adult-swim/javascript)\n  - **Airbnb**: [airbnb/javascript](https://github.com/airbnb/javascript)\n  - **AltSchool**: [AltSchool/javascript](https://github.com/AltSchool/javascript)\n  - **Apartmint**: [apartmint/javascript](https://github.com/apartmint/javascript)\n  - **Ascribe**: [ascribe/javascript](https://github.com/ascribe/javascript)\n  - **Avalara**: [avalara/javascript](https://github.com/avalara/javascript)\n  - **Avant**: [avantcredit/javascript](https://github.com/avantcredit/javascript)\n  - **Axept**: [axept/javascript](https://github.com/axept/javascript)\n  - **BashPros**: [BashPros/javascript](https://github.com/BashPros/javascript)\n  - **Billabong**: [billabong/javascript](https://github.com/billabong/javascript)\n  - **Bisk**: [bisk/javascript](https://github.com/Bisk/javascript/)\n  - **Bonhomme**: [bonhommeparis/javascript](https://github.com/bonhommeparis/javascript)\n  - **Brainshark**: [brainshark/javascript](https://github.com/brainshark/javascript)\n  - **CaseNine**: [CaseNine/javascript](https://github.com/CaseNine/javascript)\n  - **Chartboost**: [ChartBoost/javascript-style-guide](https://github.com/ChartBoost/javascript-style-guide)\n  - **ComparaOnline**: [comparaonline/javascript](https://github.com/comparaonline/javascript-style-guide)\n  - **Compass Learning**: [compasslearning/javascript-style-guide](https://github.com/compasslearning/javascript-style-guide)\n  - **DailyMotion**: [dailymotion/javascript](https://github.com/dailymotion/javascript)\n  - **DoSomething**: [DoSomething/eslint-config](https://github.com/DoSomething/eslint-config)\n  - **Digitpaint** [digitpaint/javascript](https://github.com/digitpaint/javascript)\n  - **Ecosia**: [ecosia/javascript](https://github.com/ecosia/javascript)\n  - **Evernote**: [evernote/javascript-style-guide](https://github.com/evernote/javascript-style-guide)\n  - **Evolution Gaming**: [evolution-gaming/javascript](https://github.com/evolution-gaming/javascript)\n  - **EvozonJs**: [evozonjs/javascript](https://github.com/evozonjs/javascript)\n  - **ExactTarget**: [ExactTarget/javascript](https://github.com/ExactTarget/javascript)\n  - **Expensify** [Expensify/Style-Guide](https://github.com/Expensify/Style-Guide/blob/master/javascript.md)\n  - **Flexberry**: [Flexberry/javascript-style-guide](https://github.com/Flexberry/javascript-style-guide)\n  - **Gawker Media**: [gawkermedia/javascript](https://github.com/gawkermedia/javascript)\n  - **General Electric**: [GeneralElectric/javascript](https://github.com/GeneralElectric/javascript)\n  - **Generation Tux**: [GenerationTux/javascript](https://github.com/generationtux/styleguide)\n  - **GoodData**: [gooddata/gdc-js-style](https://github.com/gooddata/gdc-js-style)\n  - **Grooveshark**: [grooveshark/javascript](https://github.com/grooveshark/javascript)\n  - **Honey**: [honeyscience/javascript](https://github.com/honeyscience/javascript)\n  - **How About We**: [howaboutwe/javascript](https://github.com/howaboutwe/javascript-style-guide)\n  - **Huballin**: [huballin/javascript](https://github.com/huballin/javascript)\n  - **HubSpot**: [HubSpot/javascript](https://github.com/HubSpot/javascript)\n  - **Hyper**: [hyperoslo/javascript-playbook](https://github.com/hyperoslo/javascript-playbook/blob/master/style.md)\n  - **InterCity Group**: [intercitygroup/javascript-style-guide](https://github.com/intercitygroup/javascript-style-guide)\n  - **Jam3**: [Jam3/Javascript-Code-Conventions](https://github.com/Jam3/Javascript-Code-Conventions)\n  - **JeopardyBot**: [kesne/jeopardy-bot](https://github.com/kesne/jeopardy-bot/blob/master/STYLEGUIDE.md)\n  - **JSSolutions**: [JSSolutions/javascript](https://github.com/JSSolutions/javascript)\n  - **KickorStick**: [kickorstick/javascript](https://github.com/kickorstick/javascript)\n  - **Kinetica Solutions**: [kinetica/javascript](https://github.com/kinetica/Javascript-style-guide)\n  - **Lonely Planet**: [lonelyplanet/javascript](https://github.com/lonelyplanet/javascript)\n  - **M2GEN**: [M2GEN/javascript](https://github.com/M2GEN/javascript)\n  - **Mighty Spring**: [mightyspring/javascript](https://github.com/mightyspring/javascript)\n  - **MinnPost**: [MinnPost/javascript](https://github.com/MinnPost/javascript)\n  - **MitocGroup**: [MitocGroup/javascript](https://github.com/MitocGroup/javascript)\n  - **ModCloth**: [modcloth/javascript](https://github.com/modcloth/javascript)\n  - **Money Advice Service**: [moneyadviceservice/javascript](https://github.com/moneyadviceservice/javascript)\n  - **Muber**: [muber/javascript](https://github.com/muber/javascript)\n  - **National Geographic**: [natgeo/javascript](https://github.com/natgeo/javascript)\n  - **Nimbl3**: [nimbl3/javascript](https://github.com/nimbl3/javascript)\n  - **Nulogy**: [nulogy/javascript](https://github.com/nulogy/javascript)\n  - **Orange Hill Development**: [orangehill/javascript](https://github.com/orangehill/javascript)\n  - **Orion Health**: [orionhealth/javascript](https://github.com/orionhealth/javascript)\n  - **OutBoxSoft**: [OutBoxSoft/javascript](https://github.com/OutBoxSoft/javascript)\n  - **Peerby**: [Peerby/javascript](https://github.com/Peerby/javascript)\n  - **Razorfish**: [razorfish/javascript-style-guide](https://github.com/razorfish/javascript-style-guide)\n  - **reddit**: [reddit/styleguide/javascript](https://github.com/reddit/styleguide/tree/master/javascript)\n  - **React**: [facebook.github.io/react/contributing/how-to-contribute.html#style-guide](https://facebook.github.io/react/contributing/how-to-contribute.html#style-guide)\n  - **REI**: [reidev/js-style-guide](https://github.com/rei/code-style-guides/blob/master/docs/javascript.md)\n  - **Ripple**: [ripple/javascript-style-guide](https://github.com/ripple/javascript-style-guide)\n  - **SeekingAlpha**: [seekingalpha/javascript-style-guide](https://github.com/seekingalpha/javascript-style-guide)\n  - **Shutterfly**: [shutterfly/javascript](https://github.com/shutterfly/javascript)\n  - **Sourcetoad**: [sourcetoad/javascript](https://github.com/sourcetoad/javascript)\n  - **Springload**: [springload/javascript](https://github.com/springload/javascript)\n  - **StratoDem Analytics**: [stratodem/javascript](https://github.com/stratodem/javascript)\n  - **SteelKiwi Development**: [steelkiwi/javascript](https://github.com/steelkiwi/javascript)\n  - **StudentSphere**: [studentsphere/javascript](https://github.com/studentsphere/guide-javascript)\n  - **SwoopApp**: [swoopapp/javascript](https://github.com/swoopapp/javascript)\n  - **SysGarage**: [sysgarage/javascript-style-guide](https://github.com/sysgarage/javascript-style-guide)\n  - **Syzygy Warsaw**: [syzygypl/javascript](https://github.com/syzygypl/javascript)\n  - **Target**: [target/javascript](https://github.com/target/javascript)\n  - **TheLadders**: [TheLadders/javascript](https://github.com/TheLadders/javascript)\n  - **The Nerdery**: [thenerdery/javascript-standards](https://github.com/thenerdery/javascript-standards)\n  - **T4R Technology**: [T4R-Technology/javascript](https://github.com/T4R-Technology/javascript)\n  - **VoxFeed**: [VoxFeed/javascript-style-guide](https://github.com/VoxFeed/javascript-style-guide)\n  - **WeBox Studio**: [weboxstudio/javascript](https://github.com/weboxstudio/javascript)\n  - **Weggo**: [Weggo/javascript](https://github.com/Weggo/javascript)\n  - **Zillow**: [zillow/javascript](https://github.com/zillow/javascript)\n  - **ZocDoc**: [ZocDoc/javascript](https://github.com/ZocDoc/javascript)\n\n**[⬆ 返回目录](#目录)**\n\n<a name=\"translation\"></a>\n## 翻译\n\n  这份风格指南也有其他语言的译本：\n\n  - ![br](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png) **Brazilian Portuguese**: [armoucar/javascript-style-guide](https://github.com/armoucar/javascript-style-guide)\n  - ![bg](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bulgaria.png) **Bulgarian**: [borislavvv/javascript](https://github.com/borislavvv/javascript)\n  - ![ca](https://raw.githubusercontent.com/fpmweb/javascript-style-guide/master/img/catala.png) **Catalan**: [fpmweb/javascript-style-guide](https://github.com/fpmweb/javascript-style-guide)\n  - ![tw](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png) **Chinese(Traditional)**: [jigsawye/javascript](https://github.com/jigsawye/javascript)\n  - ![cn](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png) **Chinese(Simplified)**: [yuche/javascript](https://github.com/yuche/javascript)\n  - ![fr](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png) **French**: [nmussy/javascript-style-guide](https://github.com/nmussy/javascript-style-guide)\n  - ![de](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png) **German**: [timofurrer/javascript-style-guide](https://github.com/timofurrer/javascript-style-guide)\n  - ![it](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png) **Italian**: [sinkswim/javascript-style-guide](https://github.com/sinkswim/javascript-style-guide)\n  - ![jp](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png) **Japanese**: [mitsuruog/javacript-style-guide](https://github.com/mitsuruog/javacript-style-guide)\n  - ![kr](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png) **Korean**: [tipjs/javascript-style-guide](https://github.com/tipjs/javascript-style-guide)\n  - ![pl](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png) **Polish**: [mjurczyk/javascript](https://github.com/mjurczyk/javascript)\n  - ![ru](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png) **Russian**: [uprock/javascript](https://github.com/uprock/javascript)\n  - ![es](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png) **Spanish**: [paolocarrasco/javascript-style-guide](https://github.com/paolocarrasco/javascript-style-guide)\n  - ![th](https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Thailand.png) **Thai**: [lvarayut/javascript-style-guide](https://github.com/lvarayut/javascript-style-guide)\n\n<a name=\"the-javascript-style-guide-guide\"></a>\n## JavaScript 编码规范说明\n\n  - [Reference](https://github.com/airbnb/javascript/wiki/The-JavaScript-Style-Guide-Guide)\n\n<a name=\"chat-with-us-about-javascript\"></a>\n## 讨论 JavaScript\n\n  - 欢迎到 [gitter](https://gitter.im/airbnb/javascript) 与我们聊天（英文）。\n\n## 贡献者\n\n  - [查看原始项目贡献者](https://github.com/airbnb/javascript/graphs/contributors)\n  - [查看简中翻译贡献者](https://github.com/yuche/javascript/graphs/contributors)\n\n\n## 许可协议\n\n(The MIT License)\n\nCopyright (c) 2014 Airbnb\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n**[⬆ 返回目录](#目录)**\n\n## 修订\n\n我们鼓励您派生本指南和更改规则以适应您的团队需求。您可以在下方列出对本风格指南的修改，以便定期更新本指南而无需处理合并冲突。\n","tags":["js","code style"]},{"title":"垃圾回收、内存分配","url":"/2019/04/11/垃圾回收、内存分配/","content":"# js引擎 内存分配 && 垃圾回收\n### 自动分配\n在定义变量时，自动分配内存\n\n- 垃圾回收——GC\n不需要是自动回收\n垃圾回收器会周期性的检测出不在使用的内存，释放。\n一般不在使用的内存，都被局部变量索占用，定义在某个函数内，这些变量的生命周期为从函数执行到函数执行结束。之后这些变量声明周期结束，内存被释放。\n\n- 标记清除&&引用计数*\n\n    标记清除：当变量进入环境时，变量被标记为”进入环境“，理论上被标记”进入环境“的变量是永远不能被垃圾回收机制回收的，当变量离开环境时，被标记”离开环境“。\n    引用计数：有没有指针指向该对象，如果没有，此对象内存可以被释放。\n    注：引用计数当出现循环引用时，会出现问题。\n    循环引用：对象A、B，A对象有对B对象的引用，B对象有对A对象的引用。\n\n### 内存管理\n\n- 什么时候触发垃圾回收？\n垃圾回收周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。IE6 的垃圾回收是根据内存分配量运行的，当环境中存在 256 个变量、4096 个对象、64K 的字符串任意一种情况的时候就会触发垃圾回收器工作，看起来很科学，不用按一段时间就调用一次，有时候会没必要，这样按需调用不是很好嘛？但是如果环境中就是有这么多变量一直存在，现在脚本如此复杂，很正常，那么结果就是垃圾回收器一直在工作，这样浏览器就没法玩了。\n微软在 IE7 中做了调整，触发条件不再是固定的，而是动态修改的，初始值和IE6相同，如果垃圾回收器回收的内存分配量低于程序占用内存的 15%，说明大部分内存不可被回收，设的垃圾回收触发条件过于敏感，这时候把临界条件翻倍，如果回收的内存高于 85%，说明大部分内存早就该清理了，这时候把触发条件置回。这样就使垃圾回收工作智能了很多。\n\n- 合理的 GC 方案\n1）、JavaScript 引擎基础 GC 方案是（simple GC）：mark and sweep（标记清除），即：\n*遍历所有可访问的对象。*\n*回收已不可访问的对象。*\n\n    2）、GC 的缺陷\n    和其他语言一样，JavaScript 的 GC 策略也无法避免一个问题：GC 时，停止响应其他操作，这是为了安全考虑。而 JavaScript 的 GC 在 100ms 甚至以上，对一般的应用还好，但对于 JS 游戏，动画连贯性要求比较高的应用，就麻烦了。这就是新引擎需要优化的点：避免 GC 造成的长时间停止响应。\n\n> 一般不用 setInterval，而用 setTimeout 的延时递归来代替 interval。setInterval 会产生回调堆积，特别是时间很短的时候。\n","tags":["js"]},{"title":"CNPM搭建私有仓库","url":"/2019/04/03/CNPM搭建私有仓库/","content":"# 一级标题\n>这是一个区块\n*这是强调内*\n[这是一个连接](https://www.baidu.com)\n"}]